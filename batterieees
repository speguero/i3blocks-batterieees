#!/usr/bin/env python3

#   ___________________________
#  |                           |_
#  |   B A T T E R I E E E S   | |
#  |   *- - - - - - - - - -*   |_|
#  |___________________________|

# = FUNC =>

def get_blocklet_indicator(batt_stat, ac_stat, percent, style):

	blocklet_indicator_charging    = ["CHR", "\uf0e7"]                                            # Lightning Bolt Icon
	blocklet_indicator_discharging = ["DIS", ["\uf244", "\uf243", "\uf242", "\uf241", "\uf240"]]  # Battery Icons (Order: Empty to Full)
	blocklet_indicator_full        = ["FUL", "\uf1e6"]                                            # Power Plug Icon
	blocklet_indicator_pluggedin   = ["PLG", "\uf1e6"]                                            # Plug Icon
	blocklet_indicator_unknown     = ["???", "\uf128"]                                            # Question Mark Icon

	try:
		if "charging" in batt_stat:
			return(blocklet_indicator_charging[style])

		elif "discharging" in batt_stat and style == 0:
			return(blocklet_indicator_discharging[style])

		elif "discharging" in batt_stat and style == 1:
			if percent <= 10:
				return(blocklet_indicator_discharging[style][0])

			elif percent <= 35:
				return(blocklet_indicator_discharging[style][1])

			elif percent <= 60:
				return(blocklet_indicator_discharging[style][2])

			elif percent <= 85:
				return(blocklet_indicator_discharging[style][3])

			elif percent <= 100:
				return(blocklet_indicator_discharging[style][4])

		elif "full" in batt_stat and 95 <= percent <= 100:
			return(blocklet_indicator_full[style])

		elif ac_stat == True:
			return(blocklet_indicator_pluggedin[style])

		else:
			return(blocklet_indicator_unknown[style])

	except:
		return(blocklet_indicator_unknown[0])

def get_blocklet_text_color(percent):

	if percent < 20:
		return("#FF0000\n")

	elif percent < 45:
		return("#FFAE00\n")

	elif percent < 70:
		return("#FFF600\n")

	elif percent < 95:
		return("#A8FF00\n")

	elif 95 <= percent <= 100:
		return("#00FF00\n")

def print_blocklet_nobatt_stat(style, symbol):

	if symbol:
		blocklet_text = "{}{}\n".format(style, symbol)
		
	else:
		blocklet_text = "{}\n".format(style)

	blocklet_text_color = "#FF0000\n"

	print(blocklet_text)
	print(blocklet_text_color)

def main(blocklet_style):

	import glob

	# = VARS =>

	ac_stat                   = None
	batt_percent              = []
	batt_percent_totalsum     = None
	batt_stat                 = []
	blocklet_indicator_nobatt = ["x", "\uf00d"]  # "X" Icon
	blocklet_text             = ""
	linux_rfile_ac_stat       = None
	linux_rfile_batt_percent  = None
	linux_rfile_batt_stat     = None
	linux_dpath_batt_data     = "/sys/class/power_supply/BAT*"
	linux_dpath_batt_device   = []
	linux_fpath_ac_data       = "/sys/class/power_supply/AC/online"

	# = MAIN =>

	# Text-Based Status Indicators:
	
	if blocklet_style == "-t":  
		blocklet_style = 0
	
	# Icon-Based Status Indicators. Requires "Font Awesome" font:
	
	elif blocklet_style == "-i":  
		blocklet_style = 1
	
	# Text-Based Status Indicators:
	
	else:
		blocklet_style = 0

	# Ensure OS Platform Requirements Are Met:

	if sys.platform != "linux":
		print_blocklet_nobatt_stat(blocklet_indicator_nobatt[blocklet_style], "P")
		exit()

	# Determine AC Power Status (Whether Connected/Plugged In):

	try:
		linux_rfile_ac_stat = open(linux_fpath_ac_data, "r")
		ac_stat             = int(linux_rfile_ac_stat.read().strip())
		linux_rfile_ac_stat.close()

	except:

		# Disregard AC Power Status:

		ac_stat = None

	# Searching for Batteries:

	for directory_path in glob.glob(linux_dpath_batt_data):
		linux_dpath_batt_device.append(directory_path)

	if len(linux_dpath_batt_device) == 0:

		# Battery Nonexistent or Invalid System Power Supply Device Path Glob:

		print_blocklet_nobatt_stat(blocklet_indicator_nobatt[blocklet_style], None)
		exit()

	else:

		# One or More Batteries Found, Retrieve Status and Percentage of Power Remaining Per Battery:

		try:
			for battery in linux_dpath_batt_device:
				linux_rfile_batt_percent = open("{}/capacity".format(battery), "r")
				linux_rfile_batt_stat    = open("{}/status".format(battery), "r")

				batt_percent.append(int(linux_rfile_batt_percent.read().strip()))
				batt_stat.append(linux_rfile_batt_stat.read().strip().lower())

				linux_rfile_batt_percent.close()
				linux_rfile_batt_stat.close()

		except:

			# Print Sysfs File-Reading Error as Indicator:

			print_blocklet_nobatt_stat(blocklet_indicator_nobatt[blocklet_style], "F")
			exit()

	# Determine Total Percentage of Available Power and Print Blocklet Text/Color(s):

	batt_percent_totalsum = int(sum(batt_percent) / len(batt_percent))
	blocklet_indicator    = get_blocklet_indicator(batt_stat, ac_stat, batt_percent_totalsum, blocklet_style)

	if blocklet_indicator == None:
		blocklet_text = "{}%\n".format(batt_percent_totalsum)

	else:
		blocklet_text = "{} {}%\n".format(blocklet_indicator, batt_percent_totalsum)

	print(blocklet_text)                                   # Example Output: "FUL 100%\n"
	print(get_blocklet_text_color(batt_percent_totalsum))  # Example Output: "#FFFFFF\n"

	if batt_percent_totalsum <= 10 and "discharging" in batt_stat:

		# Display Yellow Background Color in Blocklet:

		exit(33)

	else:
		exit()

if __name__ == "__main__":
	import sys
	
	try:
		blocklet_style = sys.argv[1]
	
	except:
		blocklet_style = "-t"

	main(blocklet_style)

else:
	exit()
